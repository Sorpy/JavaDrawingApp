/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import entity.DrawingPanel;
import entity.button.DragSelectToggleButton;
import entity.button.RectToggleButton;
import entity.button.SelectToggleButton;
import entity.button.common.CustomToggleButtonImpl;
import entity.shape.common.ModelShape;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import processor.Processor;

/**
 *
 * @author Lubo
 */
public class DrawView extends JFrame {

    private static final int DEFAULT_BUTTON_SIZE= 16;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton colorChooserButton;
    private javax.swing.JToggleButton dragSelectToggleButton;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu imageMenu;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JList<ModelShape> panelItemsList;
    private javax.swing.JToggleButton rectToggleButton;
    private javax.swing.JToggleButton selectToggleButton;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
    public Processor processor;
    public static Color currentColor = Color.RED;
    private JColorChooser colorChooser;
    private boolean toggled = false;
    /**
     * Creates new form DrawView
     */
    public DrawView() {
        initComponents();
        initColorChooser();
        processor = new Processor();
    }

    private void initColorChooser() {
        colorChooser = new JColorChooser(Color.BLACK); // default color is black
        colorChooser.setBorder(null);
        colorChooser.getSelectionModel().addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                colorChanged();
            }
        });
        canvasMouseListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        toolBar = new javax.swing.JToolBar();
        selectToggleButton = new SelectToggleButton();
        dragSelectToggleButton = new DragSelectToggleButton();
        rectToggleButton = new RectToggleButton();
        drawPanel = new DrawingPanel(this);
        sidePanel = new javax.swing.JPanel();
        colorChooserButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelItemsList = new javax.swing.JList<>();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        imageMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();

        setMinimumSize(new java.awt.Dimension(10, 10));

        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.setBorderPainted(false);

        buttonGroup.add(selectToggleButton);
        selectToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/FreeMoveGliph.png"))); // NOI18N
        selectToggleButton.setSelected(true);
        selectToggleButton.setToolTipText("");
        selectToggleButton.setFocusable(false);
        selectToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(selectToggleButton);

        buttonGroup.add(dragSelectToggleButton);
        dragSelectToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/DragSelectToolIcon.png"))); // NOI18N
        dragSelectToggleButton.setToolTipText("Drag Select Tool");
        dragSelectToggleButton.setFocusable(false);
        dragSelectToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        dragSelectToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(dragSelectToggleButton);

        buttonGroup.add(rectToggleButton);
        rectToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/RectangleTool.png"))); // NOI18N
        rectToggleButton.setToolTipText("Draw Rectangle");
        rectToggleButton.setFocusable(false);
        rectToggleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectToggleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(rectToggleButton);

        drawPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 431, Short.MAX_VALUE)
        );

        sidePanel.setBackground(new java.awt.Color(153, 153, 153));

        colorChooserButton.setIcon(createIcon(currentColor));
        colorChooserButton.setToolTipText("color chooser");
        colorChooserButton.setAlignmentY(0.0F);
        colorChooserButton.setFocusable(false);
        colorChooserButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        colorChooserButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        colorChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clickedColorChooseButton(evt);
            }
        });

        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 350));

        panelItemsList.setModel(createDefaultModel());
        panelItemsList.setAlignmentY(1.0F);
        jScrollPane1.setViewportView(panelItemsList);

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sidePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(colorChooserButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(colorChooserButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        fileMenu.setText("File");

        jMenuItem1.setText("jMenuItem1");
        fileMenu.add(jMenuItem1);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        imageMenu.setText("Image");
        menuBar.add(imageMenu);

        helpMenu.setText("Help");
        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clickedColorChooseButton(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clickedColorChooseButton
        Color newColor = JColorChooser.showDialog(null, "Choose a color", currentColor);
        toggleColorChooser(newColor);
    }//GEN-LAST:event_clickedColorChooseButton

    private DefaultListModel<ModelShape> createDefaultModel(){
        DefaultListModel<ModelShape> model = new DefaultListModel<ModelShape>();
        for (ModelShape shape :
            Processor.shapeList) {
            model.addElement(shape);
        }
        return model;
    }

    private void canvasMouseListener(){
        drawPanel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                getSelectedButtonText(buttonGroup).onClickFunction(e);
                processor.repaint((DrawingPanel)drawPanel);
            }

            @Override
            public void mousePressed(MouseEvent e) {
                super.mousePressed(e);
                getSelectedButtonText(buttonGroup).onPressFunction(e);
                processor.repaint((DrawingPanel)drawPanel);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                getSelectedButtonText(buttonGroup).onReleaseFunction(e);
                processor.repaint((DrawingPanel)drawPanel);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                super.mouseEntered(e);
                getSelectedButtonText(buttonGroup).onEnterFunction(e);
                processor.repaint((DrawingPanel)drawPanel);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                super.mouseExited(e);
                getSelectedButtonText(buttonGroup).onExitFunction(e);
                processor.repaint((DrawingPanel)drawPanel);
            }

            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                super.mouseWheelMoved(e);
                getSelectedButtonText(buttonGroup).onWheelMovedFunction(e);
                processor.repaint((DrawingPanel)drawPanel);
            }

            @Override
            public void mouseDragged(MouseEvent e) {
                super.mouseDragged(e);
                getSelectedButtonText(buttonGroup).onDragFunction(e);
                processor.repaint((DrawingPanel)drawPanel);
            }

//            @Override
//            public void mouseMoved(MouseEvent e) {
//                super.mouseMoved(e);
//                getSelectedButtonText(buttonGroup).onMoveFunction(e);
//                draw();
//            }

        });
        drawPanel.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                super.mouseDragged(e);
                getSelectedButtonText(buttonGroup).onDragFunction(e);
                processor.repaint((DrawingPanel)drawPanel);
            }
        });
    }

    protected void colorChanged() {
        colorChooserButton.setIcon(createIcon(colorChooser.getSelectionModel().getSelectedColor()));
    }

    protected void toggleColorChooser(Color newColor) {
        if (newColor == null) return;
        currentColor = newColor;
        colorChooserButton.setIcon(createIcon(currentColor));
        repaint();
    }

    public static  ImageIcon createIcon(Color main) {
        BufferedImage image = new BufferedImage(DEFAULT_BUTTON_SIZE, DEFAULT_BUTTON_SIZE, java.awt.image.BufferedImage.TYPE_INT_RGB);
        Graphics2D graphics = image.createGraphics();
        graphics.setColor(main);
        graphics.fillRect(0, 0, DEFAULT_BUTTON_SIZE, DEFAULT_BUTTON_SIZE);
        graphics.setXORMode(Color.BLACK);
        graphics.drawRect(0, 0, DEFAULT_BUTTON_SIZE-1, DEFAULT_BUTTON_SIZE-1);
        image.flush();
        return new ImageIcon(image);
    }

    public CustomToggleButtonImpl getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return (CustomToggleButtonImpl)button;
            }
        }

        return null;
    }
}
